<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cryptography on ImpossibleTerminal</title>
    <link>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/</link>
    <description>Recent content in Cryptography on ImpossibleTerminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Sep 2023 10:00:01 +0000</lastBuildDate><atom:link href="https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Breakfast Club</title>
      <link>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/breakfast_club/</link>
      <pubDate>Mon, 11 Sep 2023 10:00:01 +0000</pubDate>
      
      <guid>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/breakfast_club/</guid>
      <description>Write-Up Download the files provided for the challenge (BreakfastPasswords.txt).
Long Version:
Split downloaded file into single hash files. Utilize john and hashcat to crack each file (ensuring to set correct hash format). john &amp;lt;filename&amp;gt; --format=&amp;lt;hash_type&amp;gt; hashcat -a 3 -m &amp;lt;hash_type&amp;gt; &amp;lt;filename&amp;gt; Each hash crack is a single letter of the Flag. Utilize CyberChef (From: BLAKE2s), to resolve the letter of BLAKE2s hash. Required to guess for both Tuplehashes. Short Version:</description>
    </item>
    
    <item>
      <title>Multi-numeral</title>
      <link>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/mult-numeral/</link>
      <pubDate>Mon, 11 Sep 2023 10:00:01 +0000</pubDate>
      
      <guid>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/mult-numeral/</guid>
      <description>
Write-Up Download the file provided for the challenge (Challenge.txt).
Go to decoding website CyberChef (https://gchq.github.io/CyberChef/).
Copy the text file data and paste into the input section. Select the following Recipes and options: From Binary: Delimiter (Space), Byte Length (8) From Decimal: Delimiter (Space) From Hex: Delimiter (Space) From Base64: Alphabet (A-Za-z0-9+/=), Remove non-alphabet chars (True) Bake Output provides the Flag. FLAG: PCTF{w0w_s0_m4ny_number5} Flag is case sensitive. </description>
    </item>
    
    <item>
      <title>My Phone!</title>
      <link>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/my_phone/</link>
      <pubDate>Mon, 11 Sep 2023 10:00:01 +0000</pubDate>
      
      <guid>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/my_phone/</guid>
      <description>Write-Up Download the file provided for the challenge (cipher.png).
Viewed the image provided and recognized the pattern as latitude and logitude for coordinates.
Flag format within challenge page assists in validating the cipher pattern. Latitude and Longitude pattern traits:
Latitude: +/- 0 to 90 degrees XX.XXXX (max characters) Longitude: +/- 0 to 180 degrees XXX.XXXX (max characters) Symbols in the cipher show maximum unique symbols to be 14.
Deducing down the symbols to Alphabet, not Numbers.</description>
    </item>
    
    <item>
      <title>Secret Wall Code</title>
      <link>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/secret_wall_code/</link>
      <pubDate>Mon, 11 Sep 2023 10:00:01 +0000</pubDate>
      
      <guid>https://ImpossibleTerminal.github.io/patriotctf_2023/crypto/secret_wall_code/</guid>
      <description>Write-Up Download the files provided for the challenge (cipher.png and E.png).
Utilize the Hint for the challenge to arrange the alphabet in the proper order.
Alpha Z, 6 groups:
Break the alphabet into 6 groups in order of A-Z. 1 2 3 4 5 6 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Reverse 5 3 1:</description>
    </item>
    
  </channel>
</rss>
